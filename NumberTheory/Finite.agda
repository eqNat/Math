{-# OPTIONS --cubical --backtracking-instance-search #-}

module NumberTheory.Finite where

open import Prelude
open import Relations
open import Predicate
open import Data.Bool
open import Data.Natural
open import NumberTheory.Natural
open import Algebra.Field renaming (_/_ to _//_)
open import Cubical.HITs.SetQuotients renaming (rec to QRec ; elim to QElim)

variable
 n : ‚Ñï

‚Ñï‚â§ : ‚Ñï ‚Üí Type
‚Ñï‚â§ n = ‚Ñï / Œª x y ‚Üí paste x n ‚â° paste y n

FinDiscrete : Discrete (‚Ñï‚â§ n)
FinDiscrete {n = n} = discreteSetQuotients
 (BinaryRelation.equivRel (Œª a ‚Üí refl) (Œª a b x ‚Üí refl ‚ãÜ (sym x))
   Œª a b c x y ‚Üí x ‚ãÜ y) Œª a b ‚Üí natDiscrete (paste a n) (paste b n)
 where open import Cubical.Relation.Binary

instance
 FinIsSet : is-set (‚Ñï‚â§ n)
 FinIsSet = record { IsSet = Discrete‚ÜíisSet FinDiscrete }

_+‚â§_ : ‚Ñï‚â§ n ‚Üí ‚Ñï‚â§ n ‚Üí ‚Ñï‚â§ n
_+‚â§_ {n = n} = rec2 IsSet (Œª x y ‚Üí [ x + y ])
  (Œª a b c x ‚Üí eq/ (a + c) (b + c) $ transport (Œª i ‚Üí paste (AddCom .comm c a i) n ‚â° paste (AddCom .comm c b i) n)
   $ translation x c)
   Œª a b c x ‚Üí eq/ (a + b) (a + c) (translation x a)

_*‚â§_ : ‚Ñï‚â§ n ‚Üí ‚Ñï‚â§ n ‚Üí ‚Ñï‚â§ n
_*‚â§_ {n = n} = rec2 IsSet (Œª x y ‚Üí [ x * y ])
   (Œª a b c x ‚Üí eq/ (a * c) (b * c) (scaling {a} {b} x c))
  Œª a b c x ‚Üí eq/ (a * b) (a * c) $ transport
                          (Œª i ‚Üí
                             paste (multCom .comm b a i) n ‚â° paste (multCom .comm c a i) n)
                          (scaling {b} {c} x a) 

instance
  FinAddAssoc : Semigroup (_+‚â§_ {n = n})
  FinAddAssoc {n} = record { assoc = elimProp3 (Œª x y z ‚Üí IsSet (x +‚â§ (y +‚â§ z)) ((x +‚â§ y) +‚â§ z))
     Œª a b c ‚Üí cong [_] (assoc a b c) }

  _*‚â§_Assoc : Semigroup (_*‚â§_ {n = n})
  _*‚â§_Assoc {n} = record { assoc = elimProp3 (Œª x y z ‚Üí IsSet (x *‚â§ (y *‚â§ z)) ((x *‚â§ y) *‚â§ z))
     Œª a b c ‚Üí cong [_] (assoc a b c) }

  FinAddComm : Commutative (_+‚â§_ {n = n})
  FinAddComm = record { comm = elimProp2 (Œª x y ‚Üí IsSet (x +‚â§ y) (y +‚â§ x))
                 (Œª a b ‚Üí cong [_] (comm a b)) }

  _*‚â§_Comm : Commutative (_*‚â§_ {n = n})
  _*‚â§_Comm = record { comm = elimProp2 (Œª x y ‚Üí IsSet (x *‚â§ y) (y *‚â§ x))
                 (Œª a b ‚Üí cong [_] (comm a b)) }

  FinAddGroup : group (_+‚â§_ {n = n})
  FinAddGroup {n} = record
    { e = [ Z ]
    ; inverse = elimProp (Œª a (x , p) (y , q) ‚Üí Œ£PathPProp (Œª z ‚Üí IsSet (z +‚â§ a) [ Z ])
         $ x ‚â°‚ü® sym (lIdAux x)‚ü©
           [ Z ] +‚â§ x ‚â°‚ü® left _+‚â§_ (sym q)‚ü©
           (y +‚â§ a) +‚â§ x ‚â°‚ü® sym (assoc y a x)‚ü©
           y +‚â§ (a +‚â§ x) ‚â°‚ü® cong (y +‚â§_) (comm a x)‚ü©
           y +‚â§ (x +‚â§ a) ‚â°‚ü® cong (y +‚â§_) p ‚ü©
           y +‚â§ [ Z ] ‚â°‚ü® comm y [ Z ] ‚ü©
           [ Z ] +‚â§ y ‚â°‚ü® lIdAux y ‚ü©
           y ‚àé)
         Œª a ‚Üí [ fst (invAux a) ] , eq/ (fst(invAux a) + a) Z (snd(invAux a) ‚ãÜ sym(ZPaste n))
    ; lIdentity = lIdAux
    }
   where
    lIdAux : (a : ‚Ñï‚â§ n) ‚Üí [ Z ] +‚â§ a ‚â° a
    lIdAux = elimProp (Œª x ‚Üí IsSet ([ Z ] +‚â§ x) x)
      Œª a ‚Üí cong [_] refl
    invAux : (a : ‚Ñï) ‚Üí Œ£ Œª(b : ‚Ñï) ‚Üí paste (b + a) n ‚â° Z
    invAux Z = Z , ZPaste n
    invAux (S a) = invAux a
       |> Œª{ (Z , p) ‚Üí n , cong (Œª x ‚Üí paste x n) (Sout n a) ‚ãÜ pasteAdd a n ‚ãÜ p
           ; (S r , p) ‚Üí r , (cong (Œª x ‚Üí paste x n) (Sout r a) ‚ãÜ p) }

  _*‚â§_Monoid : monoid (_*‚â§_ {n = n})
  _*‚â§_Monoid {n = n} =
    record { e = [ S Z ]
           ; lIdentity = elimProp (Œª a ‚Üí IsSet ([ S Z ] *‚â§ a) a)
             Œª a ‚Üí cong [_] (addZ a)
           ; rIdentity = elimProp (Œª a ‚Üí IsSet (a *‚â§ [ S Z ]) a)
                   Œª a ‚Üí cong [_] (NatMultMonoid .rIdentity a)
           }

  FinRing : Ring (‚Ñï‚â§ n)
  FinRing {n = n} =
   record
     { _+_ = _+‚â§_
     ; _*_ = _*‚â§_
     ; lDistribute =
          elimProp3 (Œª x y z ‚Üí IsSet (_*‚â§_ x (_+‚â§_ y z))
                                        (_+‚â§_ (_*‚â§_ x y) (_*‚â§_ x z)))
                     Œª a b c ‚Üí cong [_] (lDistribute a b c)
     ; rDistribute = 
          elimProp3 (Œª x y z ‚Üí IsSet (_*‚â§_ (_+‚â§_ y z) x)
                                        (_+‚â§_ (_*‚â§_ y x) (_*‚â§_ z x)))
         Œª a b c ‚Üí cong [_] (rDistribute a b c) }
      where
      lDistAux = Œª(a b c : ‚Ñï)
               ‚Üí paste (a * paste (b + c) n) n ‚â°‚ü® pasteSideMult2 a (b + c) n ‚ü©
                 paste (a * (b + c)) n ‚â°‚ü® cong (Œª x ‚Üí paste x n) (lDistribute a b c)‚ü©
                 paste ((a * b) + (a * c)) n ‚â°‚ü® sym (pasteAddBoth (a * b) (a * c) n)‚ü©
                 paste (paste (a * b) n + paste (a * c) n) n ‚àé

  FinCRing : CRing (‚Ñï‚â§ n)
  FinCRing = record {}

-- https://en.wikipedia.org/wiki/Dihedral_group

-- Dihedral element
D = Œª(n : ‚Ñï) ‚Üí ‚Ñï‚â§ n √ó ùîπ

{- For a dihedral group 'D n', 'n' is one less than the geometric convention.
   So 'D 2' is the symmetry group of an equilateral triangle.
   'Ord(D n) = 2*(n+1)' -}

-- Dihedral operator defined from the generalized dihedral group
_‚éà_ : D n ‚Üí D n ‚Üí D n
_‚éà_ = _‚óè_
