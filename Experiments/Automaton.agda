{-# OPTIONS --cubical --overlapping-instances --hidden-argument-pun #-}

module Experiments.Automaton where

open import Prelude hiding (Œ£)
open import Data.Natural
open import Data.Finite
open import Algebra.Matrix
open import Data.Bool

module Ambigiguity where

-- private
--  data <expr> : Type where
--    _+_ : <expr> ‚Üí <expr> ‚Üí <expr>
--    _*_ : <expr> ‚Üí <expr> ‚Üí <expr>
--    [_] : <expr> ‚Üí <expr>
--    <‚Ñï> : ‚Ñï ‚Üí <expr>
-- 
--  -- Two ambiguous parse trees of (Z + S Z * S(S Z))
--  parse-1 : <expr>
--  parse-1 = <‚Ñï> Z + (<‚Ñï>(S Z) * <‚Ñï>(S(S Z)))
--  parse-2 : <expr>
--  parse-2 = (<‚Ñï> Z + <‚Ñï>(S Z)) * <‚Ñï>(S(S Z))

-- From here, I'm referencing the book:
-- Introduction to Languages and the Theory of Computation (ISBN 978‚Äì0‚Äì07‚Äì319146‚Äì1)

-- Finite Automaton: Definition 2.11
-- Q is the number of states
-- Œ£ is the size of the alphabet
record FA (Q : ‚Ñï)(Œ£ : ‚Ñï) : Type where
 field
  q‚ÇÄ : fin Q                 -- Initial state
  accepting : fin Q ‚Üí ùîπ      -- Indicator function that determines accepting states
  Œ¥ :  fin Œ£ ‚Üí fin Q ‚Üí fin Q -- transition function
open FA {{...}} public

module _{Q Œ£ : ‚Ñï}{{M : FA Q Œ£}} where

 -- Extended transition function: Definition 2.12
 Œ¥* : [ fin Œ£ ^ n ] ‚Üí fin Q
 Œ¥* x = foldr Œ¥ q‚ÇÄ x

-- Acceptance by a Finite Automaton: Definition 2.14
L : {Q : ‚Ñï}{Œ£ : ‚Ñï}(M : FA Q Œ£) ‚Üí [ fin Œ£ ^ n ] ‚Üí Type
L {Q}{Œ£} M x with accepting $ Œ¥* x
 where instance
   _ : FA Q Œ£
   _ = M
... | Yes = ‚ä§
... | No  = ‚ä•
